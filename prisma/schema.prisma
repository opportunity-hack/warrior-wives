// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              Int                  @id @default(autoincrement())
  email           String?              @unique
  name            String?
  superUser       Boolean              @default(false)
  branch          userArmyBranch       @default(ARMY)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  interests       InterestsOnUsers[]
  groups          MembersOnGroups[]
  eventsJoined    AttendeesOnEvents[]
  eventsOrganized OrganizersOnEvents[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Interest {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  users     InterestsOnUsers[]
  groups    TagsOnGroups[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Group {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String
  displayPhoto    String
  branchOfService groupArmyBranch   @default(ANY)
  county          String?
  state           String            @default("National")
  online          Boolean           @default(false)
  members         MembersOnGroups[]
  tags            TagsOnGroups[]
  events          Event[]
  passwordEnabled Boolean           @default(false)
  password        String?
  archived        Boolean           @default(false)
  archivedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Event {
  id           Int                  @id @default(autoincrement())
  name         String
  description  String
  displayPhoto String?
  location     String?
  online       Boolean              @default(false)
  dateTime     DateTime
  group        Group                @relation(fields: [groupId], references: [id])
  groupId      Int
  photos       EventPhoto[]
  materials    EventMaterial[]
  meetingLink  String?
  attendees    AttendeesOnEvents[]
  organizers   OrganizersOnEvents[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model InterestsOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  interest   Interest @relation(fields: [interestId], references: [id])
  interestId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, interestId])
}

model TagsOnGroups {
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  interest   Interest @relation(fields: [interestId], references: [id])
  interestId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([groupId, interestId])
}

model MembersOnGroups {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  admin     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([groupId, userId])
}

model AttendeesOnEvents {
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([eventId, userId])
}

model OrganizersOnEvents {
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([eventId, userId])
}

model EventPhoto {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  photo     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventMaterial {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  material  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum userArmyBranch {
  ARMY
  NAVY
  AIR_FORCE
  COAST_GUARD
  MARINE_CORPS
  SPACE_FORCE
}

enum groupArmyBranch {
  ANY
  ARMY
  NAVY
  AIR_FORCE
  COAST_GUARD
  MARINE_CORPS
  SPACE_FORCE
}
